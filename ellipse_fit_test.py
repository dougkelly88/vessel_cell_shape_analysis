# RETURN A GOODNESS OF FIT PARAMETER FOR CONFIDENCE IN FITTING TO BE INCORPORATED INTO PATH CHOICE...?

from Jama import Matrix, EigenvalueDecomposition
import math

def ellipse_center(a):
    b,c,d,f,g,a = a[1]/2, a[2], a[3]/2, a[4]/2, a[5], a[0]
    num = b*b-a*c
    x0=(c*d-b*f)/num
    y0=(a*f-b*d)/num
    return (x0,y0)

def ellipse_angle_of_rotation( a ):
    b,c,d,f,g,a = a[1]/2, a[2], a[3]/2, a[4]/2, a[5], a[0]
    return 0.5*math.atan(2*b/(a-c))

def ellipse_axis_length( a ):
    b,c,d,f,g,a = a[1]/2, a[2], a[3]/2, a[4]/2, a[5], a[0]
    up = 2*(a*f*f+c*d*d+g*b*b-2*b*d*f-a*c*g)
    down1=(b*b-a*c)*( (c-a)*math.sqrt(1+4*b*b/((a-c)*(a-c)))-(c+a))
    down2=(b*b-a*c)*( (a-c)*math.sqrt(1+4*b*b/((a-c)*(a-c)))-(c+a))
    res1=math.sqrt(up/down1)
    res2=math.sqrt(up/down2)
    return (res1, res2)

pts = [(88, 14), (54, 16), (61, 16), (62, 16), (72, 16), (53, 17), (60, 17), (63, 17), (64, 17), (69, 17), (73, 17), (93, 17), (51, 18), (54, 18), (56, 18), (59, 18), (64, 18), (65, 18), (67, 18), (68, 18), (69, 18), (70, 18), (72, 18), (86, 18), (87, 18), (89, 18), (93, 18), (51, 19), (56, 19), (59, 19), (61, 19), (62, 19), (63, 19), (64, 19), (66, 19), (67, 19), (68, 19), (71, 19), (86, 19), (93, 19), (49, 20), (50, 20), (51, 20), (52, 20), (54, 20), (56, 20), (57, 20), (58, 20), (59, 20), (60, 20), (61, 20), (64, 20), (66, 20), (67, 20), (73, 20), (87, 20), (93, 20), (50, 21), (51, 21), (56, 21), (59, 21), (61, 21), (64, 21), (65, 21), (66, 21), (67, 21), (68, 21), (69, 21), (70, 21), (71, 21), (72, 21), (73, 21), (74, 21), (97, 21), (98, 21), (99, 21), (101, 21), (103, 21), (119, 21), (52, 22), (54, 22), (55, 22), (56, 22), (59, 22), (61, 22), (65, 22), (67, 22), (68, 22), (70, 22), (72, 22), (73, 22), (74, 22), (83, 22), (98, 22), (100, 22), (101, 22), (102, 22), (103, 22), (108, 22), (109, 22), (119, 22), (49, 23), (54, 23), (59, 23), (60, 23), (61, 23), (65, 23), (67, 23), (68, 23), (69, 23), (70, 23), (71, 23), (72, 23), (73, 23), (77, 23), (79, 23), (93, 23), (97, 23), (98, 23), (100, 23), (103, 23), (104, 23), (105, 23), (106, 23), (107, 23), (108, 23), (110, 23), (117, 23), (118, 23), (49, 24), (50, 24), (54, 24), (64, 24), (65, 24), (66, 24), (67, 24), (68, 24), (69, 24), (70, 24), (72, 24), (73, 24), (76, 24), (77, 24), (78, 24), (79, 24), (87, 24), (89, 24), (90, 24), (93, 24), (94, 24), (95, 24), (97, 24), (98, 24), (99, 24), (100, 24), (101, 24), (102, 24), (103, 24), (104, 24), (106, 24), (107, 24), (108, 24), (109, 24), (110, 24), (111, 24), (112, 24), (113, 24), (114, 24), (115, 24), (117, 24), (118, 24), (121, 24), (49, 25), (50, 25), (51, 25), (52, 25), (54, 25), (64, 25), (66, 25), (67, 25), (68, 25), (70, 25), (72, 25), (75, 25), (77, 25), (80, 25), (83, 25), (91, 25), (93, 25), (94, 25), (95, 25), (96, 25), (97, 25), (98, 25), (99, 25), (100, 25), (101, 25), (103, 25), (104, 25), (105, 25), (107, 25), (115, 25), (116, 25), (117, 25), (118, 25), (119, 25), (121, 25), (122, 25), (50, 26), (53, 26), (54, 26), (55, 26), (56, 26), (62, 26), (63, 26), (64, 26), (65, 26), (67, 26), (68, 26), (69, 26), (70, 26), (72, 26), (73, 26), (74, 26), (75, 26), (76, 26), (77, 26), (79, 26), (83, 26), (84, 26), (89, 26), (95, 26), (97, 26), (98, 26), (100, 26), (102, 26), (103, 26), (105, 26), (106, 26), (107, 26), (108, 26), (113, 26), (114, 26), (115, 26), (118, 26), (120, 26), (121, 26), (122, 26), (56, 27), (62, 27), (64, 27), (65, 27), (67, 27), (68, 27), (70, 27), (71, 27), (72, 27), (73, 27), (74, 27), (77, 27), (79, 27), (80, 27), (81, 27), (82, 27), (83, 27), (84, 27), (85, 27), (86, 27), (87, 27), (89, 27), (92, 27), (93, 27), (94, 27), (95, 27), (99, 27), (100, 27), (102, 27), (105, 27), (106, 27), (108, 27), (109, 27), (110, 27), (111, 27), (113, 27), (115, 27), (118, 27), (119, 27), (120, 27), (121, 27), (122, 27), (123, 27), (124, 27), (125, 27), (126, 27), (127, 27), (56, 28), (57, 28), (58, 28), (59, 28), (62, 28), (63, 28), (64, 28), (65, 28), (67, 28), (68, 28), (69, 28), (70, 28), (72, 28), (74, 28), (77, 28), (81, 28), (83, 28), (84, 28), (86, 28), (88, 28), (89, 28), (92, 28), (93, 28), (94, 28), (98, 28), (100, 28), (101, 28), (102, 28), (103, 28), (104, 28), (105, 28), (111, 28), (113, 28), (114, 28), (115, 28), (119, 28), (121, 28), (123, 28), (126, 28), (127, 28), (128, 28), (57, 29), (59, 29), (60, 29), (61, 29), (64, 29), (68, 29), (70, 29), (71, 29), (74, 29), (75, 29), (76, 29), (77, 29), (78, 29), (79, 29), (82, 29), (84, 29), (86, 29), (89, 29), (92, 29), (94, 29), (96, 29), (97, 29), (99, 29), (100, 29), (104, 29), (105, 29), (107, 29), (108, 29), (109, 29), (110, 29), (111, 29), (112, 29), (113, 29), (119, 29), (120, 29), (121, 29), (123, 29), (124, 29), (125, 29), (126, 29), (128, 29), (130, 29), (57, 30), (59, 30), (61, 30), (62, 30), (63, 30), (64, 30), (65, 30), (66, 30), (67, 30), (68, 30), (70, 30), (71, 30), (74, 30), (75, 30), (77, 30), (79, 30), (83, 30), (87, 30), (88, 30), (89, 30), (91, 30), (93, 30), (98, 30), (100, 30), (108, 30), (110, 30), (111, 30), (113, 30), (119, 30), (121, 30), (125, 30), (126, 30), (127, 30), (57, 31), (61, 31), (62, 31), (64, 31), (65, 31), (66, 31), (67, 31), (70, 31), (74, 31), (77, 31), (82, 31), (86, 31), (87, 31), (89, 31), (92, 31), (93, 31), (95, 31), (102, 31), (109, 31), (110, 31), (111, 31), (112, 31), (113, 31), (114, 31), (115, 31), (116, 31), (117, 31), (118, 31), (119, 31), (121, 31), (125, 31), (127, 31), (128, 31), (129, 31), (63, 32), (67, 32), (68, 32), (69, 32), (70, 32), (71, 32), (72, 32), (77, 32), (79, 32), (83, 32), (87, 32), (89, 32), (93, 32), (111, 32), (112, 32), (114, 32), (115, 32), (117, 32), (121, 32), (122, 32), (123, 32), (124, 32), (125, 32), (126, 32), (127, 32), (128, 32), (129, 32), (64, 33), (68, 33), (69, 33), (72, 33), (77, 33), (82, 33), (83, 33), (86, 33), (112, 33), (113, 33), (114, 33), (115, 33), (116, 33), (118, 33), (121, 33), (124, 33), (125, 33), (126, 33), (127, 33), (130, 33), (67, 34), (68, 34), (84, 34), (119, 34), (125, 34), (127, 34), (129, 34), (130, 34), (131, 34), (70, 35), (87, 35), (118, 35), (121, 35), (126, 35), (127, 35), (131, 35), (118, 36), (122, 36), (70, 37), (87, 37)];
xs = [float(x) for (x, y) in pts];
xmean = sum(xs)/len(xs);
xs = [x - xmean for x in xs];
ys = [float(y) for (x, y) in pts];
ymean = sum(ys)/len(ys);
ys = [y - ymean for y in ys];
#print("x[:10] = " + str(xs[:10]))
#print("y[:10] = " + str(ys[:10]))

d1 = [x * x for x in xs];
d2 = [x * y for (x, y) in zip(xs, ys)];
d3 = [y * y for y in ys];
d4 = [x for x in xs];
d5 = [y for y in ys];
d6 = [1 for x in xs];
d = sum([d1, d2, d3, d4, d5, d6], []);
D = Matrix(d, len(d1));

S = D.transpose().times(D);
print("S = " + str([s for s in S.getRowPackedCopy()]))
C = Matrix(6, 6);
C.set(0, 2, 2);
C.set(2, 0, 2);
C.set(1, 1, -1);
#eig = EigenvalueDecomposition(S.inverse().times(C));
eig = EigenvalueDecomposition(S.inverse().times(C.transpose()));
#eig = EigenvalueDecomposition(S.inverse().transpose().times(C));
E = eig.getRealEigenvalues();
print("eigenvalues = " + str([('%.2E' % e) for e in E]));
#E = [abs(e) for e in E];
#print(E)
V = eig.getV();
print("eigenvectors = ");
vs = [v for v in V.getRowPackedCopy()];

N = 6;
for idx in range(0,N):
	print(str([('%.2E' % v) for v in vs[N * idx : (idx + 1) * N]]));
absE = [abs(e) for e in E];
n = absE.index(max(absE));
a = [V.get(idx, n) for idx in range(0, N)];
(xc, yc) = ellipse_center(a);
xc += xmean;
yc += ymean;
print("Ellipse centre = " + str((xc,yc)));
print("Ellipse angle = " + str(ellipse_angle_of_rotation(a)));
print("Ax len = " + str(ellipse_axis_length(a)));